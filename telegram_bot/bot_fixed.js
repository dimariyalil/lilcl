import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';

dotenv.config();

/**
 * Fixed Telegram Bot for AI Agents Team Management System
 * Improved error handling and message processing
 */
class AgentsTeamBotFixed {
  constructor(apiGatewayUrl = 'http://localhost:3000') {
    this.token = process.env.TELEGRAM_BOT_TOKEN;
    this.apiGatewayUrl = apiGatewayUrl;
    this.bot = null;
    this.userSessions = new Map();
    this.isStarted = false;
  }

  /**
   * Initialize and start the Telegram bot with better error handling
   */
  async start() {
    if (!this.token) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not found in environment variables');
      console.log('Token format should be: 1234567890:ABCDefGhIJKlmnoPQRstUVWxyz');
      return false;
    }

    try {
      console.log('üîß Creating bot instance...');
      
      // Create bot with explicit options
      this.bot = new TelegramBot(this.token, {
        polling: {
          interval: 300,
          autoStart: true,
          params: {
            timeout: 10
          }
        }
      });

      console.log('üîß Setting up error handlers...');
      this.setupErrorHandlers();
      
      console.log('üîß Setting up commands...');
      await this.setupCommands();
      
      console.log('üîß Setting up message handlers...');
      this.setupMessageHandlers();
      
      this.isStarted = true;
      console.log('‚úÖ Telegram bot started successfully');
      console.log('üì± Bot is ready to receive messages');
      
      // Test the bot by getting bot info
      try {
        const botInfo = await this.bot.getMe();
        console.log(`ü§ñ Bot info: @${botInfo.username} (${botInfo.first_name})`);
        console.log(`üìã Bot ID: ${botInfo.id}`);
      } catch (error) {
        console.error('‚ö†Ô∏è Could not get bot info:', error.message);
      }
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Failed to start Telegram bot:', error.message);
      console.error('Full error:', error);
      return false;
    }
  }

  /**
   * Setup error handlers
   */
  setupErrorHandlers() {
    this.bot.on('error', (error) => {
      console.error('üî¥ Bot error:', error);
    });

    this.bot.on('polling_error', (error) => {
      console.error('üî¥ Polling error:', error.code, error.message);
      
      // Try to restart if polling fails
      if (error.code === 'EFATAL') {
        console.log('üîÑ Attempting to restart polling...');
        setTimeout(() => {
          this.restart();
        }, 5000);
      }
    });
  }

  /**
   * Setup bot commands with better error handling
   */
  async setupCommands() {
    try {
      const commands = [
        { command: 'start', description: 'Start interacting with AI agents' },
        { command: 'help', description: 'Show available commands' },
        { command: 'task', description: 'Submit a new task' },
        { command: 'status', description: 'Check task status' },
        { command: 'agents', description: 'List available agents' },
        { command: 'report', description: 'Get team performance report' },
        { command: 'cancel', description: 'Cancel current operation' }
      ];
      
      await this.bot.setMyCommands(commands);
      console.log('‚úÖ Bot commands set successfully');
    } catch (error) {
      console.error('‚ö†Ô∏è Could not set bot commands:', error.message);
    }
  }

  /**
   * Setup message handlers with improved logging
   */
  setupMessageHandlers() {
    // Handle /start command
    this.bot.onText(/\/start/, async (msg) => {
      console.log(`üì® /start command from ${msg.from.first_name} (${msg.chat.id})`);
      await this.sendWelcomeMessage(msg.chat.id);
    });

    // Handle /help command
    this.bot.onText(/\/help/, async (msg) => {
      console.log(`üì® /help command from ${msg.from.first_name} (${msg.chat.id})`);
      await this.sendHelpMessage(msg.chat.id);
    });

    // Handle /task command
    this.bot.onText(/\/task/, async (msg) => {
      console.log(`üì® /task command from ${msg.from.first_name} (${msg.chat.id})`);
      await this.initiateTaskSubmission(msg.chat.id);
    });

    // Handle /agents command
    this.bot.onText(/\/agents/, async (msg) => {
      console.log(`üì® /agents command from ${msg.from.first_name} (${msg.chat.id})`);
      await this.listAgents(msg.chat.id);
    });

    // Handle /status command with parameter
    this.bot.onText(/\/status (.+)/, async (msg, match) => {
      const taskId = match[1];
      console.log(`üì® /status command from ${msg.from.first_name} for task: ${taskId}`);
      await this.checkTaskStatus(msg.chat.id, taskId);
    });

    // Handle /report command
    this.bot.onText(/\/report/, async (msg) => {
      console.log(`üì® /report command from ${msg.from.first_name} (${msg.chat.id})`);
      await this.generateTeamReport(msg.chat.id);
    });

    // Handle /cancel command
    this.bot.onText(/\/cancel/, async (msg) => {
      console.log(`üì® /cancel command from ${msg.from.first_name} (${msg.chat.id})`);
      await this.cancelOperation(msg.chat.id);
    });

    // Handle regular text messages
    this.bot.on('message', async (msg) => {
      // Skip if it's a command
      if (msg.text && msg.text.startsWith('/')) return;
      
      console.log(`üì® Text message from ${msg.from.first_name}: "${msg.text}"`);
      await this.handleTextMessage(msg.chat.id, msg.text);
    });

    // Handle callback queries (button presses)
    this.bot.on('callback_query', async (callbackQuery) => {
      console.log(`üîò Button pressed by ${callbackQuery.from.first_name}: ${callbackQuery.data}`);
      await this.handleCallbackQuery(callbackQuery);
    });

    console.log('‚úÖ Message handlers set up successfully');
  }

  /**
   * Send welcome message
   */
  async sendWelcomeMessage(chatId) {
    const message = `ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Agents Team Management System!*

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã AI –∞–≥–µ–Ω—Ç–æ–≤. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:

üéØ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º
üìä –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
üë• –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
üìà –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /task —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!`;

    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      console.log(`‚úÖ Welcome message sent to ${chatId}`);
    } catch (error) {
      console.error(`‚ùå Failed to send welcome message to ${chatId}:`, error.message);
    }
  }

  /**
   * Send help message
   */
  async sendHelpMessage(chatId) {
    const message = `üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/task - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–µ AI –∞–≥–µ–Ω—Ç–æ–≤
/status <taskId> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
/agents - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

*–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /task
2. –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
4. –ü–æ–ª—É—á–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤:*
üîç SEO Specialist - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
üé® Brand Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–º
üìä Market Analyst - –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
üí∞ Finance Analyst - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
üì¶ Product Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–º
üì¢ Marketing Manager - –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞
ü§ù Partnership Manager - –†–∞–∑–≤–∏—Ç–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å!`;

    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      console.log(`‚úÖ Help message sent to ${chatId}`);
    } catch (error) {
      console.error(`‚ùå Failed to send help message to ${chatId}:`, error.message);
    }
  }

  /**
   * Initiate task submission
   */
  async initiateTaskSubmission(chatId) {
    this.userSessions.set(chatId, { 
      state: 'awaiting_task_description',
      taskData: {}
    });

    const message = `üìù *–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ AI –∞–≥–µ–Ω—Ç–∞–º*

–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ä—É—á–∏—Ç—å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ AI –∞–≥–µ–Ω—Ç–æ–≤. –ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

*–ü—Ä–∏–º–µ—Ä:* "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ SEO –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"

–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:`;

    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      console.log(`‚úÖ Task initiation message sent to ${chatId}`);
    } catch (error) {
      console.error(`‚ùå Failed to send task initiation message to ${chatId}:`, error.message);
    }
  }

  /**
   * Handle text messages based on user session
   */
  async handleTextMessage(chatId, text) {
    const session = this.userSessions.get(chatId);
    
    if (!session) {
      const message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –∏–ª–∏ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";
      try {
        await this.bot.sendMessage(chatId, message);
      } catch (error) {
        console.error(`‚ùå Failed to send response to ${chatId}:`, error.message);
      }
      return;
    }

    switch (session.state) {
      case 'awaiting_task_description':
        session.taskData.description = text;
        session.state = 'selecting_priority';
        await this.showPrioritySelection(chatId);
        break;
        
      default:
        const defaultMessage = "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.";
        try {
          await this.bot.sendMessage(chatId, defaultMessage);
        } catch (error) {
          console.error(`‚ùå Failed to send default response to ${chatId}:`, error.message);
        }
    }
  }

  /**
   * Show priority selection with inline keyboard
   */
  async showPrioritySelection(chatId) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data: 'priority_high' },
          { text: 'üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data: 'priority_medium' }
        ],
        [
          { text: 'üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data: 'priority_low' }
        ]
      ]
    };

    const message = `‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:*

üî¥ **–í—ã—Å–æ–∫–∏–π** - –°—Ä–æ—á–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
üü° **–°—Ä–µ–¥–Ω–∏–π** - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
üü¢ **–ù–∏–∑–∫–∏–π** - –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤`;

    try {
      await this.bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard 
      });
      console.log(`‚úÖ Priority selection sent to ${chatId}`);
    } catch (error) {
      console.error(`‚ùå Failed to send priority selection to ${chatId}:`, error.message);
    }
  }

  /**
   * Handle callback queries from inline keyboards
   */
  async handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const session = this.userSessions.get(chatId);

    if (!session) return;

    try {
      await this.bot.answerCallbackQuery(callbackQuery.id);

      if (data.startsWith('priority_')) {
        const priority = data.replace('priority_', '');
        session.taskData.priority = priority;
        
        await this.submitTask(chatId, session.taskData);
      }
    } catch (error) {
      console.error(`‚ùå Failed to handle callback query from ${chatId}:`, error.message);
    }
  }

  /**
   * Submit task to API gateway
   */
  async submitTask(chatId, taskData) {
    try {
      await this.bot.sendMessage(chatId, '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–µ AI –∞–≥–µ–Ω—Ç–æ–≤...');

      const response = await fetch(`${this.apiGatewayUrl}/task`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          description: taskData.description,
          priority: taskData.priority,
          requiredSkills: taskData.requiredSkills || []
        })
      });

      const result = await response.json();

      if (result.success) {
        const message = `‚úÖ *–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*

üìã *ID –∑–∞–¥–∞—á–∏:* \`${result.data.taskId}\`
ü§ñ *–ù–∞–∑–Ω–∞—á–µ–Ω–æ:* ${result.data.assignedAgent}
‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${taskData.priority}

üìà *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*
${result.data.result.substring(0, 500)}${result.data.result.length > 500 ? '...' : ''}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/status ${result.data.taskId}\` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.`;

        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        await this.bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏*\n\n${result.error || result.message}`);
      }

    } catch (error) {
      console.error('Error submitting task:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ AI –∞–≥–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // Clear session
    this.userSessions.delete(chatId);
  }

  /**
   * List available agents
   */
  async listAgents(chatId) {
    try {
      await this.bot.sendMessage(chatId, 'üìã –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–∞—Ö...');

      const response = await fetch(`${this.apiGatewayUrl}/agents`);
      const result = await response.json();

      if (result.success) {
        let message = `üë• *–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –∞–≥–µ–Ω—Ç—ã (${result.total_agents})*\n\n`;

        result.agents.forEach(agent => {
          const statusIcon = agent.status === 'idle' ? 'üü¢' : agent.status === 'busy' ? 'üü°' : 'üî¥';
          message += `${statusIcon} *${agent.name}*\n`;
          message += `   –†–æ–ª—å: ${agent.role}\n`;
          message += `   –°—Ç–∞—Ç—É—Å: ${agent.status}\n`;
          message += `   –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏: ${agent.current_tasks}\n`;
          message += `   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${agent.completed_tasks}\n\n`;
        });

        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö');
      }

    } catch (error) {
      console.error('Error listing agents:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ –∞–≥–µ–Ω—Ç–æ–≤.');
    }
  }

  /**
   * Check task status
   */
  async checkTaskStatus(chatId, taskId) {
    try {
      await this.bot.sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏...');

      const response = await fetch(`${this.apiGatewayUrl}/status/${taskId}`);
      const result = await response.json();

      if (result.success) {
        const task = result.data;
        const message = `üìã *–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–¥–∞—á–∏*

üìã *ID –∑–∞–¥–∞—á–∏:* \`${taskId}\`
üìä *–°—Ç–∞—Ç—É—Å:* ${task.status}
ü§ñ *–ê–≥–µ–Ω—Ç:* ${task.assignedAgent || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${task.priority || '–ù/–î'}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}

${task.result ? `üìà *–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n${task.result.result}` : ''}
${task.error ? `‚ùå *–û—à–∏–±–∫–∞:*\n${task.error}` : ''}

‚è∞ *–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞:*
–°–æ–∑–¥–∞–Ω–æ: ${task.assignedAt ? new Date(task.assignedAt).toLocaleString() : '–ù/–î'}
${task.completedAt ? `–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date(task.completedAt).toLocaleString()}` : ''}`;

        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        await this.bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${taskId}`);
      }

    } catch (error) {
      console.error('Error checking task status:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.');
    }
  }

  /**
   * Generate team report
   */
  async generateTeamReport(chatId) {
    try {
      await this.bot.sendMessage(chatId, 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã...');

      const response = await fetch(`${this.apiGatewayUrl}/reports/team`);
      const result = await response.json();

      if (result.success) {
        const report = result.data;
        const stats = report.team_statistics;

        const message = `üìà *–û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã*

üìÖ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:* ${new Date(report.generated_at).toLocaleString()}

üìä *–û–±–∑–æ—Ä:*
‚Ä¢ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: ${stats.total_agents}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${stats.active_tasks}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${stats.completed_tasks}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${stats.failed_tasks}

üìà *–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞—á: ${stats.performance_metrics.tasksAssigned}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${stats.performance_metrics.tasksCompleted}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${stats.performance_metrics.successRate.toFixed(1)}%
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${stats.performance_metrics.averageCompletionTime.toFixed(1)} –º–∏–Ω

üß† *–ê–Ω–∞–ª–∏–∑ CEO:*
${report.ceo_insights}`;

        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã');
      }

    } catch (error) {
      console.error('Error generating team report:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.');
    }
  }

  /**
   * Cancel current operation
   */
  async cancelOperation(chatId) {
    if (this.userSessions.has(chatId)) {
      this.userSessions.delete(chatId);
      await this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    } else {
      await this.bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
    }
  }

  /**
   * Restart the bot
   */
  async restart() {
    console.log('üîÑ Restarting bot...');
    if (this.bot) {
      await this.bot.stopPolling();
    }
    setTimeout(() => {
      this.start();
    }, 2000);
  }

  /**
   * Stop the bot
   */
  async stop() {
    if (this.bot && this.isStarted) {
      console.log('üõë Stopping Telegram bot...');
      await this.bot.stopPolling();
      this.isStarted = false;
      console.log('‚úÖ Telegram bot stopped');
    }
  }
}

export { AgentsTeamBotFixed };